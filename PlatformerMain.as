package  {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import com.coreyoneil.collision.CollisionList;	public class PlatformerMain extends MovieClip {		var myPlayer:Player;		var upPressed:Boolean = false;		var upWasPressed:Boolean = false;		var downPressed:Boolean = false;		var leftPressed:Boolean = false;		var rightPressed:Boolean = false;		var isPlayerDead:Boolean = false;		var isPlayerFinished:Boolean = false;		var collisions:CollisionList;		var environment:Array;		var xmin:Number;		var xmax:Number;		var offset:Number;						public function PlatformerMain() {			// constructor code			environment = [];			myPlayer = new Player( 200, 200);			addChild(myPlayer);						addEventListener( Event.ADDED_TO_STAGE, onAddToStage );			addEventListener(Event.ENTER_FRAME, executeFrame);		}				public function constructDemo(){			var newtile:Tile = new Tile(0,550);			environment.push(newtile);			newtile = new Tile(100,550);			environment.push(newtile);			//gap			newtile = new Tile(250,550);			environment.push(newtile);			//second gap			newtile = new Tile(400,550);			environment.push(newtile);			//stairs			newtile = new Tile(500,500);			environment.push(newtile);			newtile = new Tile(600,450);			environment.push(newtile);			//down stairs			newtile = new Tile(700,500);			environment.push(newtile);			newtile = new Tile(800,550);			environment.push(newtile);			newtile = new Tile(900,550);			environment.push(newtile);			//second gap			newtile = new Tile(1050,550);			environment.push(newtile);			newtile = new Tile(1150,550);			environment.push(newtile);			var finish:Goal = new Goal(1150,500);			environment.push(finish);			collisions = new CollisionList(myPlayer);			for(var i = 0; i < environment.length; i++){				collisions.addItem(environment[i]);				addChild(environment[i]);			}			offset = 0;			xmin = 0;			xmax = 1250;		}				public function onAddToStage( event:Event ):void		{			stage.addEventListener( KeyboardEvent.KEY_DOWN, setKeyPressed  );			stage.addEventListener( KeyboardEvent.KEY_UP, unsetKeyPressed );			xmin = 0;			xmax = stage.width;			constructDemo();		}				function executeFrame(event:Event)		{			movePlayer(event);			handleCollisions();		}				function handleCollisions()		{			//do stuff here											}				function moveEnvironment(amt:Number)		{			if(((offset + amt) > (xmax - stage.stageWidth))||((offset + amt) < xmin))			{				myPlayer.x += amt;			}			else{				var item;								for(var i = 0; i < environment.length; i++)				{					item = environment[i];					item.x -= amt;				}				offset += amt;			}		}				function movePlayer(event:Event)		{			if (!myPlayer.onPlatform)			{				myPlayer.dy += 5;			}			if (upPressed)			{				if(upWasPressed){					if( myPlayer.dy <= -10){						myPlayer.dy -=2.5;					}				}else{					if(myPlayer.onPlatform){						myPlayer.dy = -25;						myPlayer.onPlatform = false;						upWasPressed = true;					}				}			}			/*if (downPressed)			{				myPlayer.dy = Math.min(myPlayer.dy+2, 10);			}*/			if (leftPressed)			{				if(myPlayer.dx >= 0){					myPlayer.dx = Math.floor(myPlayer.dx / 2) - 3;				}else{					myPlayer.dx = Math.max(myPlayer.dx-3, -15);				}			}			if (rightPressed)			{				if(myPlayer.dx <= 0){					myPlayer.dx = Math.floor(myPlayer.dx / 2) + 3;				}else{					myPlayer.dx = Math.min(myPlayer.dx+3, 15);				}			}			if (!rightPressed && !leftPressed)			{				myPlayer.dx = 0;			}			/*if (!downPressed && !upPressed)			{				myPlayer.dy = 0;			}*/			if((myPlayer.x >= (stage.stageWidth * .75) && myPlayer.dx > 0) || (myPlayer.x <= (stage.stageWidth * .25) && myPlayer.dx < 0))			{				moveEnvironment(myPlayer.dx);			}else{				myPlayer.x += myPlayer.dx;			}						myPlayer.y += myPlayer.dy;			if(myPlayer.y > (600 - myPlayer.height / 2))			{				myPlayer.y = 600 - myPlayer.height / 2;				myPlayer.Land();				upWasPressed = false;			}		}		function setKeyPressed(event:KeyboardEvent):void		{			switch (event.keyCode)			{				case Keyboard.UP:				{					if(upPressed){						//upWasPressed = true;					}else{						upPressed = true;						upWasPressed = false;					}					break;				}				case Keyboard.DOWN:				{					downPressed = true;					break;				}				case Keyboard.LEFT:				{					leftPressed = true;					break;				}				case Keyboard.RIGHT:				{					rightPressed = true;					break;				}			}		}				function unsetKeyPressed(event:KeyboardEvent):void		{			switch (event.keyCode)			{				case Keyboard.UP:				{					upPressed = false;					break;				}				case Keyboard.DOWN:				{					downPressed = false;					break;				}				case Keyboard.LEFT:				{					leftPressed = false;					break;				}				case Keyboard.RIGHT:				{					rightPressed = false;					break;				}			}		}	}	}