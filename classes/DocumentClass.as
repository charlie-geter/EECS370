package {	//main part of the game, so we can have stuff like game over screens and pause screens. 	// separates out the stuff we're adding from the rest.	import flash.display.MovieClip;	//import flash.desktop;	import flash.system.fscommand;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.text.TextField;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.text.TextFormat;	public class DocumentClass extends MovieClip 	{		public var playScreen:PlatformerMain;		var startScreen:StartScreen; 		var gameOverScreen:GameOverText;		var levelCompleteScreen:LevelCompleteText;		var lastLevel:Number;		var nextLevel:Number;		var quit:Boolean = false;		var restart:Boolean = false;		var nextlevel_ready:Boolean = false;		var useJetpack;		var maxTime:Number;		var myTimer:Timer;		var timerText:TextField;		var timerFormat:TextFormat;				public function DocumentClass() 		{			//lastLevel = nextLevel = 5; //test			lastLevel = 0;			nextLevel = 0;				playScreen = new PlatformerMain(nextLevel, false);			//playScreen = new PlatformerMain(nextLevel,true);			playScreen.addEventListener(AvatarEvent.DEAD, onAvatarDeath); 			playScreen.addEventListener(AvatarEvent.GOAL_REACHED, onAvatarWin);				//timer stuff			maxTime = 480;			myTimer = new Timer(1000,maxTime);			myTimer.addEventListener(TimerEvent.TIMER, countdown);			//on-screen timer positioning			timerText = new TextField();			timerText.x = 350;			timerText.y = 550;			timerText.width = 100;			timerText.height = 50;			timerText.background = true;			timerText.backgroundColor = 0x888888;			//timer formatting			timerFormat = new TextFormat();			timerFormat.size = 48;			timerFormat.align = "center";						//starting information screen			startScreen = new StartScreen();			startScreen.x = 0;			startScreen.y = 0;			addChild( startScreen );			stage.addEventListener(KeyboardEvent.KEY_DOWN, startGameListener);		}				public function startGameListener(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case 13:					restart = true;					break;			}			if(restart){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, startGameListener);				restart = false;				startGame();			}		}				public function setText(field:TextField)		{			var newtime = (maxTime - myTimer.currentCount);			if(newtime == 0)			{				onTimerDeath();			}			var mytext = Math.floor(newtime/60) + ":" + (((newtime % 60) >= 10) ? "":"0") + (newtime % 60);			field.text = mytext;			field.setTextFormat(timerFormat);		}				public function countdown(e:TimerEvent)		{			setText(timerText);		}				public function startGame()		{			setText(timerText);						removeChild( startScreen );			addChild( playScreen );			addChild( timerText );			myTimer.start();			startScreen = null;		}				public function onTimerDeath():void		{			gameOverScreen = new GameOverText2();			gameOverScreen.x = 0;			gameOverScreen.y = 0;			addChild( gameOverScreen ); 			addChild( timerText );			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownTimerListener);		}				public function keyDownTimerListener(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case 81:					//dispatchEvent(new AvatarEvent(AvatarEvent.QUIT));					quit = true;					onQuit(new AvatarEvent(AvatarEvent.QUIT));					break;			}			if(quit){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownTimerListener);				quit = false;			}		}				public function onAvatarDeath(avatarEvent:AvatarEvent):void		{			gameOverScreen = new GameOverText();			gameOverScreen.x = 0;			gameOverScreen.y = 0;			addChild( gameOverScreen ); 			addChild( timerText );			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownGameOverListener);		}				public function keyDownGameOverListener(e:KeyboardEvent):void		{			switch (e.keyCode)			{				/*case 81:					//dispatchEvent(new AvatarEvent(AvatarEvent.QUIT));					quit = true;					onQuit(new AvatarEvent(AvatarEvent.QUIT));					break;*/				case 13:					//dispatchEvent(new AvatarEvent(AvatarEvent.RESTART));					restart = true;					onRestart(new AvatarEvent(AvatarEvent.RESTART));					break;			}			if(quit || restart){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownGameOverListener);				quit = restart = false;			}		}				public function onRestart(avatarEvent:AvatarEvent):void		{			removeChild( playScreen );			if (gameOverScreen != null)			{				removeChild( gameOverScreen );			}			else if (levelCompleteScreen != null)			{				removeChild( levelCompleteScreen );			}			playScreen = new PlatformerMain(lastLevel, useJetpack);			playScreen.firstRun = false;			playScreen.addEventListener(AvatarEvent.DEAD, onAvatarDeath); 			playScreen.addEventListener(AvatarEvent.GOAL_REACHED, onAvatarWin);						addChild( playScreen );			addChild( timerText );			gameOverScreen = null;		}								public function onNextLevel(avatarEvent:AvatarEvent):void		{			lastLevel = nextLevel;			removeChild( playScreen );			removeChild( levelCompleteScreen );			playScreen = new PlatformerMain(nextLevel, useJetpack);			playScreen.firstRun = false;			playScreen.addEventListener(AvatarEvent.DEAD, onAvatarDeath); 			playScreen.addEventListener(AvatarEvent.GOAL_REACHED, onAvatarWin);						addChild( playScreen );			addChild( timerText );			levelCompleteScreen = null;		}				public function onQuit(avatarEvent:AvatarEvent):void		{			//applicationExit();			fscommand("quit");		}		/*		public function applicationExit():void {			var exitingEvent:Event = new Event(Event.EXITING, false, true);			NativeApplication.nativeApplication.dispatchEvent(exitingEvent);			if (!exitingEvent.isDefaultPrevented()) {				NativeApplication.nativeApplication.exit();			}		}				private function onExiting(exitingEvent:Event):void {			var winClosingEvent:Event;			for each (var win:NativeWindow in NativeApplication.nativeApplication.openedWindows) {				winClosingEvent = new Event(Event.CLOSING,false,true);				win.dispatchEvent(winClosingEvent);				if (!winClosingEvent.isDefaultPrevented()) {					win.close();				} else {					exitingEvent.preventDefault();				}			}						if (!exitingEvent.isDefaultPrevented()) {				//perform cleanup			}		}*/				public function onAvatarWin(avatarEvent:AvatarEvent):void		{			useJetpack = playScreen.myPlayer.hasJetpack;			if ( avatarEvent.levelnum == 100 ) 			{				levelCompleteScreen = new EndGameScreen();				levelCompleteScreen.x = 0;				levelCompleteScreen.y = 0;				myTimer.stop();				timerText.x = 325;				timerText.y = 425;				addChild( levelCompleteScreen );				addChild( timerText );				//end game in victory			}else{				levelCompleteScreen = new LevelCompleteText();				levelCompleteScreen.x = 0;				levelCompleteScreen.y = 0;				nextLevel = avatarEvent.levelnum;								addChild( levelCompleteScreen );				addChild( timerText );				stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownAvatarWinListener);				//playScreen = null;			}		}				public function keyDownAvatarWinListener(e:KeyboardEvent):void		{			switch (e.keyCode)			{				/*case 81:					//dispatchEvent(new AvatarEvent(AvatarEvent.QUIT));					quit = true;					onQuit(new AvatarEvent(AvatarEvent.QUIT));					break;				case 82:					//dispatchEvent(new AvatarEvent(AvatarEvent.RESTART));					restart = true;					onRestart(new AvatarEvent(AvatarEvent.RESTART));					break;*/				case 13:					//dispatchEvent(new AvatarEvent(AvatarEvent.RESTART));					nextlevel_ready = true;					onNextLevel(new AvatarEvent(AvatarEvent.RESTART));					break;			}			if(quit || restart || nextlevel_ready){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownAvatarWinListener);				quit = restart = nextlevel_ready = false;			}		}	}}